# Role-Based Facial Recognition Attendance System - Requirements
# Enhanced Dependencies for Multi-Role Production Deployment

# Web Framework and Real-time Communication
Flask==2.3.3
Flask-SocketIO==5.3.6
eventlet==0.33.3
python-socketio==5.9.0

# Computer Vision and Facial Recognition
opencv-python==4.8.1.78
face-recognition==1.3.0
dlib==19.24.2
Pillow==10.0.1

# Data Processing and Analytics
pandas==2.1.1
numpy==1.24.3

# Database (SQLite is built-in with Python)
# sqlite3  # Built-in with Python

# Authentication and Security
bcrypt==4.0.1
cryptography==41.0.7
PyJWT==2.8.0

# Utilities and Scheduling
schedule==1.2.0
python-dateutil==2.8.2
uuid==1.30

# Development and Testing
pytest==7.4.2
pytest-flask==1.2.0

# Power BI Integration Dependencies
openpyxl==3.1.2  # For Excel export functionality
xlsxwriter==3.1.9  # For advanced Excel formatting

# Additional Role-Based Features
python-magic==0.4.27  # File type detection for uploads
Werkzeug==2.3.7  # Enhanced file handling

# System Requirements:
# - Python 3.8 or higher
# - Camera (built-in or USB) for facial recognition
# - 4GB RAM minimum (8GB recommended for multi-user)
# - 5GB storage space (includes user data and audit trails)
# - Modern web browser with JavaScript enabled

# Installation Instructions:
# 1. Create virtual environment: python -m venv .venv
# 2. Activate environment: source .venv/bin/activate (Linux/Mac) or .venv\Scripts\activate (Windows)
# 3. Install requirements: pip install -r requirements.txt
# 4. Initialize enhanced database: python enhanced_database.py
# 5. Run role-based system: python role_based_app.py

# Available Dashboards:
# - Admin Dashboard: http://localhost:5002/admin/dashboard
# - Teacher Dashboard: http://localhost:5002/teacher/dashboard
# - Student Dashboard: http://localhost:5002/student/dashboard
# - Parent Dashboard: http://localhost:5002/parent/dashboard

# Default Login Credentials:
# - Admin: admin / admin123
# - Teacher: teacher1 / teacher123
# - Student: student1 / student123
# - Parent: parent1 / parent123

# Power BI Integration:
# 1. Generate exports: python powerbi_integration.py
# 2. Start auto-refresh: python powerbi_auto_refresh.py --interval 15
# 3. Connect Power BI Desktop to attendance.db or import CSV files from powerbi_exports/

# Role-Based Features:
# - Student: Schedule viewing, attendance history, grade access, absence justifications
# - Teacher: Course management, grade entry, attendance monitoring, student communication
# - Parent: Child monitoring, justification approval, school communication, notifications
# - Admin: Complete system oversight, user management, course scheduling, audit trails

# Production Deployment Notes:
# - Use gunicorn or similar WSGI server for production
# - Configure reverse proxy (nginx/apache) for web interface
# - Set up automated backups for attendance.db
# - Monitor logs in logs/ directory
# - Configure firewall for port 5002 access
# - Enable HTTPS for secure authentication
# - Set up regular database maintenance and cleanup
# - Configure email notifications for system alerts
