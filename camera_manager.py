"""
Module de gestion intelligente des cam√©ras pour le syst√®me de reconnaissance faciale
Ce module d√©tecte et priorise automatiquement la cam√©ra int√©gr√©e de l'ordinateur
"""

import cv2
import platform
import subprocess
import re
import time

class CameraManager:
    def __init__(self):
        """Initialise le gestionnaire de cam√©ras"""
        self.system = platform.system()
        self.available_cameras = []
        self.preferred_camera = None
        
    def detect_cameras(self):
        """
        D√©tecte toutes les cam√©ras disponibles et identifie la cam√©ra int√©gr√©e
        
        Returns:
            list: Liste des cam√©ras disponibles avec leurs informations
        """
        print("üîç D√©tection des cam√©ras disponibles...")
        cameras = []
        
        # Tester les indices de cam√©ra de 0 √† 10
        for i in range(11):
            try:
                cap = cv2.VideoCapture(i)
                if cap.isOpened():
                    # Tester si la cam√©ra fonctionne
                    ret, frame = cap.read()
                    if ret and frame is not None and frame.size > 0:
                        # Obtenir les informations de la cam√©ra
                        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        fps = int(cap.get(cv2.CAP_PROP_FPS))
                        
                        camera_info = {
                            'index': i,
                            'width': width,
                            'height': height,
                            'fps': fps,
                            'name': self._get_camera_name(i),
                            'is_builtin': self._is_builtin_camera(i),
                            'priority': self._calculate_priority(i, width, height)
                        }
                        
                        cameras.append(camera_info)
                        print(f"‚úÖ Cam√©ra {i}: {camera_info['name']} ({width}x{height})")
                        
                    cap.release()
                else:
                    # Cam√©ra non accessible
                    pass
                    
            except Exception as e:
                # Erreur lors du test de la cam√©ra
                pass
        
        # Trier les cam√©ras par priorit√© (cam√©ra int√©gr√©e en premier)
        cameras.sort(key=lambda x: x['priority'], reverse=True)
        self.available_cameras = cameras
        
        if cameras:
            print(f"üì∑ {len(cameras)} cam√©ra(s) d√©tect√©e(s)")
            for cam in cameras:
                builtin_status = "üñ•Ô∏è  Int√©gr√©e" if cam['is_builtin'] else "üîå Externe"
                print(f"   {cam['index']}: {cam['name']} - {builtin_status} (Priorit√©: {cam['priority']})")
        else:
            print("‚ùå Aucune cam√©ra d√©tect√©e")
            
        return cameras
    
    def _get_camera_name(self, index):
        """
        Obtient le nom de la cam√©ra selon le syst√®me d'exploitation
        
        Args:
            index (int): Index de la cam√©ra
            
        Returns:
            str: Nom de la cam√©ra
        """
        try:
            if self.system == "Windows":
                return self._get_windows_camera_name(index)
            elif self.system == "Darwin":  # macOS
                return self._get_macos_camera_name(index)
            elif self.system == "Linux":
                return self._get_linux_camera_name(index)
            else:
                return f"Cam√©ra {index}"
        except:
            return f"Cam√©ra {index}"
    
    def _get_windows_camera_name(self, index):
        """Obtient le nom de la cam√©ra sur Windows"""
        try:
            # Utiliser PowerShell pour obtenir les informations des cam√©ras
            cmd = "Get-WmiObject -Class Win32_PnPEntity | Where-Object {$_.Name -like '*camera*' -or $_.Name -like '*webcam*'} | Select-Object Name"
            result = subprocess.run(["powershell", "-Command", cmd], 
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0 and result.stdout:
                lines = result.stdout.strip().split('\n')
                camera_names = [line.strip() for line in lines if line.strip() and 'Name' not in line and '---' not in line]
                if index < len(camera_names):
                    return camera_names[index]
        except:
            pass
        
        # Noms par d√©faut bas√©s sur l'index
        if index == 0:
            return "Cam√©ra int√©gr√©e"
        else:
            return f"Cam√©ra externe {index}"
    
    def _get_macos_camera_name(self, index):
        """Obtient le nom de la cam√©ra sur macOS"""
        try:
            # Utiliser system_profiler pour obtenir les informations des cam√©ras
            result = subprocess.run(["system_profiler", "SPCameraDataType"], 
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                # Analyser la sortie pour trouver les noms des cam√©ras
                lines = result.stdout.split('\n')
                camera_names = []
                
                for line in lines:
                    if 'Model ID:' in line or 'Unique ID:' in line:
                        # Extraire le nom de la cam√©ra
                        name = line.split(':')[-1].strip()
                        if name and name not in camera_names:
                            camera_names.append(name)
                
                if index < len(camera_names):
                    return camera_names[index]
        except:
            pass
        
        # Noms par d√©faut pour macOS
        if index == 0:
            return "FaceTime HD Camera (Int√©gr√©e)"
        else:
            return f"Cam√©ra externe {index}"
    
    def _get_linux_camera_name(self, index):
        """Obtient le nom de la cam√©ra sur Linux"""
        try:
            # Utiliser v4l2-ctl pour obtenir les informations des cam√©ras
            device_path = f"/dev/video{index}"
            result = subprocess.run(["v4l2-ctl", "--device", device_path, "--info"], 
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                # Extraire le nom de la cam√©ra
                for line in result.stdout.split('\n'):
                    if 'Card type' in line:
                        return line.split(':')[-1].strip()
        except:
            pass
        
        # Noms par d√©faut pour Linux
        if index == 0:
            return "Cam√©ra int√©gr√©e USB"
        else:
            return f"Cam√©ra USB {index}"
    
    def _is_builtin_camera(self, index):
        """
        D√©termine si une cam√©ra est int√©gr√©e √† l'ordinateur
        
        Args:
            index (int): Index de la cam√©ra
            
        Returns:
            bool: True si la cam√©ra est int√©gr√©e
        """
        # La cam√©ra index 0 est g√©n√©ralement la cam√©ra int√©gr√©e
        if index == 0:
            return True
        
        # V√©rifications suppl√©mentaires selon le syst√®me
        camera_name = self._get_camera_name(index).lower()
        
        # Mots-cl√©s indiquant une cam√©ra int√©gr√©e
        builtin_keywords = [
            'facetime', 'integrated', 'built-in', 'internal', 
            'int√©gr√©e', 'int√©gr√©', 'webcam int√©gr√©e', 'hd camera'
        ]
        
        # Mots-cl√©s indiquant une cam√©ra externe
        external_keywords = [
            'usb', 'external', 'logitech', 'microsoft', 'creative',
            'externe', 'phone', 'mobile', 'android', 'iphone'
        ]
        
        # V√©rifier les mots-cl√©s
        for keyword in external_keywords:
            if keyword in camera_name:
                return False
                
        for keyword in builtin_keywords:
            if keyword in camera_name:
                return True
        
        # Par d√©faut, consid√©rer les indices faibles comme int√©gr√©s
        return index <= 1
    
    def _calculate_priority(self, index, width, height):
        """
        Calcule la priorit√© d'une cam√©ra
        
        Args:
            index (int): Index de la cam√©ra
            width (int): Largeur de l'image
            height (int): Hauteur de l'image
            
        Returns:
            int: Score de priorit√© (plus √©lev√© = plus prioritaire)
        """
        priority = 0
        
        # Priorit√© bas√©e sur le type de cam√©ra
        if self._is_builtin_camera(index):
            priority += 1000  # Tr√®s haute priorit√© pour les cam√©ras int√©gr√©es
        
        # Priorit√© bas√©e sur l'index (plus bas = plus prioritaire)
        priority += (10 - index) * 10
        
        # Priorit√© bas√©e sur la r√©solution (r√©solutions standard privil√©gi√©es)
        resolution_score = 0
        if width >= 1280 and height >= 720:  # HD ou mieux
            resolution_score = 50
        elif width >= 640 and height >= 480:  # VGA ou mieux
            resolution_score = 30
        else:
            resolution_score = 10
        
        priority += resolution_score
        
        return priority
    
    def get_best_camera(self):
        """
        Obtient la meilleure cam√©ra disponible (priorit√© √† la cam√©ra int√©gr√©e)
        
        Returns:
            cv2.VideoCapture ou None: Objet cam√©ra ou None si aucune cam√©ra
        """
        if not self.available_cameras:
            self.detect_cameras()
        
        if not self.available_cameras:
            print("‚ùå Aucune cam√©ra disponible")
            return None
        
        # Prendre la cam√©ra avec la plus haute priorit√©
        best_camera = self.available_cameras[0]
        
        print(f"üéØ S√©lection de la cam√©ra: {best_camera['name']} (Index: {best_camera['index']})")
        
        try:
            cap = cv2.VideoCapture(best_camera['index'])
            
            if cap.isOpened():
                # Configurer la cam√©ra pour de meilleures performances
                cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
                cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
                cap.set(cv2.CAP_PROP_FPS, 30)
                
                # Tester la cam√©ra
                ret, frame = cap.read()
                if ret and frame is not None and frame.size > 0:
                    print(f"‚úÖ Cam√©ra {best_camera['index']} initialis√©e avec succ√®s")
                    print(f"üì∑ Type: {'üñ•Ô∏è  Cam√©ra int√©gr√©e' if best_camera['is_builtin'] else 'üîå Cam√©ra externe'}")
                    print(f"üìê R√©solution: {best_camera['width']}x{best_camera['height']}")
                    
                    self.preferred_camera = best_camera
                    return cap
                else:
                    print(f"‚ùå La cam√©ra {best_camera['index']} ne fournit pas d'images valides")
                    cap.release()
            else:
                print(f"‚ùå Impossible d'ouvrir la cam√©ra {best_camera['index']}")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation de la cam√©ra: {e}")
        
        return None
    
    def get_camera_info(self):
        """
        Retourne les informations de la cam√©ra actuellement utilis√©e
        
        Returns:
            dict: Informations de la cam√©ra ou None
        """
        return self.preferred_camera
    
    def list_all_cameras(self):
        """
        Affiche la liste de toutes les cam√©ras d√©tect√©es
        """
        if not self.available_cameras:
            self.detect_cameras()
        
        if not self.available_cameras:
            print("‚ùå Aucune cam√©ra d√©tect√©e")
            return
        
        print("\nüì∑ CAM√âRAS DISPONIBLES:")
        print("=" * 60)
        
        for i, cam in enumerate(self.available_cameras):
            status = "üñ•Ô∏è  INT√âGR√âE" if cam['is_builtin'] else "üîå EXTERNE"
            priority_stars = "‚≠ê" * min(5, cam['priority'] // 200)
            
            print(f"{i+1}. Index {cam['index']}: {cam['name']}")
            print(f"   Type: {status}")
            print(f"   R√©solution: {cam['width']}x{cam['height']} @ {cam['fps']} FPS")
            print(f"   Priorit√©: {cam['priority']} {priority_stars}")
            print()

# Fonction utilitaire pour tester le gestionnaire de cam√©ras
if __name__ == "__main__":
    print("üé• Test du gestionnaire de cam√©ras")
    print("=" * 50)
    
    manager = CameraManager()
    
    # Lister toutes les cam√©ras
    manager.list_all_cameras()
    
    # Obtenir la meilleure cam√©ra
    cap = manager.get_best_camera()
    
    if cap:
        print("\nüéØ Test de capture d'image...")
        ret, frame = cap.read()
        if ret:
            print("‚úÖ Capture d'image r√©ussie!")
            print(f"üìê Taille de l'image: {frame.shape}")
        else:
            print("‚ùå √âchec de la capture d'image")
        
        cap.release()
    else:
        print("‚ùå Aucune cam√©ra disponible pour le test")
