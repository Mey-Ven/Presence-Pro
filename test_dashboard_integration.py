"""
Script de test pour v√©rifier l'int√©gration compl√®te du syst√®me de reconnaissance faciale
avec le tableau de bord web
"""

import requests
import time
import json
from datetime import datetime

# Configuration
DASHBOARD_URL = "http://localhost:5001"
USERNAME = "admin"
PASSWORD = "admin123"

class DashboardTester:
    def __init__(self):
        self.session = requests.Session()
        self.logged_in = False
    
    def login(self):
        """Se connecter au tableau de bord"""
        print("üîê Connexion au tableau de bord...")
        
        # Obtenir la page de connexion
        response = self.session.get(f"{DASHBOARD_URL}/login")
        if response.status_code != 200:
            print(f"‚ùå Erreur lors de l'acc√®s √† la page de connexion: {response.status_code}")
            return False
        
        # Se connecter
        login_data = {
            'username': USERNAME,
            'password': PASSWORD
        }
        
        response = self.session.post(f"{DASHBOARD_URL}/login", data=login_data)
        if response.status_code == 200 and "dashboard" in response.url:
            print("‚úÖ Connexion r√©ussie")
            self.logged_in = True
            return True
        else:
            print(f"‚ùå √âchec de la connexion: {response.status_code}")
            return False
    
    def test_recognition_status(self):
        """Tester l'API de statut de reconnaissance"""
        print("\nüìä Test du statut de reconnaissance...")
        
        if not self.logged_in:
            print("‚ùå Non connect√©")
            return False
        
        try:
            response = self.session.get(f"{DASHBOARD_URL}/api/recognition/status")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Statut r√©cup√©r√©:")
                print(f"   - Reconnaissance active: {data.get('is_running', False)}")
                print(f"   - Statut cam√©ra: {data.get('camera_status', 'Inconnu')}")
                print(f"   - Visages connus: {data.get('known_faces_count', 0)}")
                print(f"   - Encodages charg√©s: {data.get('encodings_loaded', False)}")
                return True
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def test_start_recognition(self):
        """Tester le d√©marrage de la reconnaissance"""
        print("\nüöÄ Test du d√©marrage de la reconnaissance...")
        
        if not self.logged_in:
            print("‚ùå Non connect√©")
            return False
        
        try:
            response = self.session.post(f"{DASHBOARD_URL}/api/recognition/start")
            if response.status_code == 200:
                data = response.json()
                if data.get('success', False):
                    print(f"‚úÖ Reconnaissance d√©marr√©e: {data.get('message', '')}")
                    return True
                else:
                    print(f"‚ö†Ô∏è D√©marrage √©chou√©: {data.get('message', '')}")
                    return False
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def test_stop_recognition(self):
        """Tester l'arr√™t de la reconnaissance"""
        print("\nüõë Test de l'arr√™t de la reconnaissance...")
        
        if not self.logged_in:
            print("‚ùå Non connect√©")
            return False
        
        try:
            response = self.session.post(f"{DASHBOARD_URL}/api/recognition/stop")
            if response.status_code == 200:
                data = response.json()
                if data.get('success', False):
                    print(f"‚úÖ Reconnaissance arr√™t√©e: {data.get('message', '')}")
                    return True
                else:
                    print(f"‚ö†Ô∏è Arr√™t √©chou√©: {data.get('message', '')}")
                    return False
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def test_reload_encodings(self):
        """Tester le rechargement des encodages"""
        print("\nüîÑ Test du rechargement des encodages...")
        
        if not self.logged_in:
            print("‚ùå Non connect√©")
            return False
        
        try:
            response = self.session.post(f"{DASHBOARD_URL}/api/recognition/reload")
            if response.status_code == 200:
                data = response.json()
                if data.get('success', False):
                    print(f"‚úÖ Encodages recharg√©s: {data.get('message', '')}")
                    return True
                else:
                    print(f"‚ö†Ô∏è Rechargement √©chou√©: {data.get('message', '')}")
                    return False
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def test_stats_api(self):
        """Tester l'API des statistiques"""
        print("\nüìà Test de l'API des statistiques...")
        
        if not self.logged_in:
            print("‚ùå Non connect√©")
            return False
        
        try:
            response = self.session.get(f"{DASHBOARD_URL}/api/stats")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Statistiques r√©cup√©r√©es:")
                print(f"   - Total √©tudiants: {data.get('total_students', 0)}")
                print(f"   - Pr√©sences aujourd'hui: {data.get('today_attendance', 0)}")
                print(f"   - Total pr√©sences: {data.get('total_attendance', 0)}")
                print(f"   - Pr√©sences cette semaine: {data.get('week_attendance', 0)}")
                return True
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def test_dashboard_access(self):
        """Tester l'acc√®s au tableau de bord"""
        print("\nüè† Test d'acc√®s au tableau de bord...")
        
        if not self.logged_in:
            print("‚ùå Non connect√©")
            return False
        
        try:
            response = self.session.get(f"{DASHBOARD_URL}/dashboard")
            if response.status_code == 200:
                print("‚úÖ Tableau de bord accessible")
                # V√©rifier la pr√©sence de certains √©l√©ments
                content = response.text
                if "Contr√¥le de Reconnaissance Faciale" in content:
                    print("‚úÖ Section de contr√¥le de reconnaissance trouv√©e")
                if "D√©marrer Reconnaissance" in content:
                    print("‚úÖ Bouton de d√©marrage trouv√©")
                if "Flux Cam√©ra en Direct" in content:
                    print("‚úÖ Section de flux cam√©ra trouv√©e")
                return True
            else:
                print(f"‚ùå Erreur d'acc√®s: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def run_full_test(self):
        """Ex√©cuter tous les tests"""
        print("üß™ D√âMARRAGE DES TESTS D'INT√âGRATION")
        print("=" * 60)
        
        tests = [
            ("Connexion", self.login),
            ("Acc√®s tableau de bord", self.test_dashboard_access),
            ("API statistiques", self.test_stats_api),
            ("Statut reconnaissance", self.test_recognition_status),
            ("Rechargement encodages", self.test_reload_encodings),
            ("D√©marrage reconnaissance", self.test_start_recognition),
            ("Statut apr√®s d√©marrage", self.test_recognition_status),
            ("Arr√™t reconnaissance", self.test_stop_recognition),
            ("Statut apr√®s arr√™t", self.test_recognition_status),
        ]
        
        results = []
        
        for test_name, test_func in tests:
            print(f"\nüß™ Test: {test_name}")
            try:
                result = test_func()
                results.append((test_name, result))
                status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
                print(f"   R√©sultat: {status}")
                
                # Petite pause entre les tests
                time.sleep(1)
                
            except Exception as e:
                print(f"   ‚ùå ERREUR: {e}")
                results.append((test_name, False))
        
        # R√©sum√© des r√©sultats
        print("\nüìä R√âSUM√â DES TESTS")
        print("=" * 60)
        
        passed = sum(1 for _, result in results if result)
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
            print(f"   {test_name}: {status}")
        
        print(f"\nüéØ R√âSULTAT GLOBAL: {passed}/{total} tests r√©ussis")
        
        if passed == total:
            print("üéâ TOUS LES TESTS SONT R√âUSSIS!")
            print("   L'int√©gration du tableau de bord fonctionne parfaitement.")
        elif passed >= total * 0.8:
            print("‚úÖ LA PLUPART DES TESTS SONT R√âUSSIS")
            print("   L'int√©gration fonctionne globalement bien.")
        else:
            print("‚ö†Ô∏è PLUSIEURS TESTS ONT √âCHOU√â")
            print("   V√©rifiez la configuration et les logs du serveur.")
        
        return passed, total

def main():
    """Fonction principale"""
    print("üéØ TESTEUR D'INT√âGRATION TABLEAU DE BORD")
    print("=" * 60)
    print("Ce script teste l'int√©gration compl√®te du syst√®me de reconnaissance")
    print("faciale avec le tableau de bord web.")
    print()
    
    # V√©rifier que le serveur est accessible
    try:
        response = requests.get(DASHBOARD_URL, timeout=5)
        print(f"‚úÖ Serveur accessible √† {DASHBOARD_URL}")
    except Exception as e:
        print(f"‚ùå Serveur non accessible: {e}")
        print("   Assurez-vous que le tableau de bord est d√©marr√© avec:")
        print("   python admin_dashboard.py")
        return
    
    # Ex√©cuter les tests
    tester = DashboardTester()
    passed, total = tester.run_full_test()
    
    # Recommandations
    print("\nüí° RECOMMANDATIONS:")
    if passed == total:
        print("   - Le syst√®me est pr√™t pour la production")
        print("   - Vous pouvez utiliser toutes les fonctionnalit√©s")
        print("   - Testez avec de vrais utilisateurs")
    else:
        print("   - V√©rifiez les logs du serveur pour plus de d√©tails")
        print("   - Assurez-vous que toutes les d√©pendances sont install√©es")
        print("   - Red√©marrez le serveur si n√©cessaire")

if __name__ == "__main__":
    main()
