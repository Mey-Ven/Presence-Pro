"""
Script de r√©initialisation compl√®te du syst√®me Presence Pro
Remet le syst√®me √† z√©ro et corrige tous les probl√®mes critiques
"""

import os
import shutil
import sqlite3
import glob
from datetime import datetime

def reset_database():
    """R√©initialise compl√®tement la base de donn√©es SQLite"""
    print("üóÑÔ∏è R√âINITIALISATION DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    db_path = "attendance.db"
    
    try:
        # Se connecter √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Supprimer toutes les pr√©sences
        print("üóëÔ∏è Suppression de toutes les pr√©sences...")
        cursor.execute("DELETE FROM presences")
        deleted_presences = cursor.rowcount
        print(f"   ‚úÖ {deleted_presences} pr√©sences supprim√©es")
        
        # Supprimer tous les √©tudiants
        print("üë• Suppression de tous les √©tudiants...")
        cursor.execute("DELETE FROM etudiants")
        deleted_students = cursor.rowcount
        print(f"   ‚úÖ {deleted_students} √©tudiants supprim√©s")
        
        # R√©initialiser les compteurs auto-increment si n√©cessaire
        cursor.execute("DELETE FROM sqlite_sequence WHERE name IN ('etudiants', 'presences')")
        
        # Valider les changements
        conn.commit()
        conn.close()
        
        print("‚úÖ Base de donn√©es compl√®tement r√©initialis√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation de la base de donn√©es: {e}")
        return False

def reset_dataset_folder():
    """Supprime et recr√©e le dossier dataset"""
    print("\nüìÅ R√âINITIALISATION DU DOSSIER DATASET")
    print("=" * 60)
    
    dataset_path = "dataset"
    
    try:
        # Supprimer le dossier dataset s'il existe
        if os.path.exists(dataset_path):
            print("üóëÔ∏è Suppression du dossier dataset existant...")
            shutil.rmtree(dataset_path)
            print("   ‚úÖ Dossier dataset supprim√©")
        
        # Recr√©er le dossier dataset vide
        print("üìÅ Cr√©ation d'un nouveau dossier dataset...")
        os.makedirs(dataset_path, exist_ok=True)
        print("   ‚úÖ Nouveau dossier dataset cr√©√©")
        
        # Cr√©er un fichier .gitkeep pour maintenir le dossier dans git
        gitkeep_path = os.path.join(dataset_path, ".gitkeep")
        with open(gitkeep_path, 'w') as f:
            f.write("# Ce fichier maintient le dossier dataset dans git\n")
        
        print("‚úÖ Dossier dataset r√©initialis√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation du dataset: {e}")
        return False

def reset_encodings():
    """Supprime les fichiers d'encodages faciaux"""
    print("\nüß† R√âINITIALISATION DES ENCODAGES FACIAUX")
    print("=" * 60)
    
    try:
        # Supprimer les fichiers d'encodages
        encoding_files = [
            "face_encodings.pkl",
            "encodings.pkl", 
            "known_faces.pkl",
            "facial_encodings.dat"
        ]
        
        deleted_count = 0
        for file in encoding_files:
            if os.path.exists(file):
                os.remove(file)
                print(f"   üóëÔ∏è {file} supprim√©")
                deleted_count += 1
        
        if deleted_count > 0:
            print(f"‚úÖ {deleted_count} fichier(s) d'encodages supprim√©(s)")
        else:
            print("‚ÑπÔ∏è Aucun fichier d'encodages √† supprimer")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression des encodages: {e}")
        return False

def clean_temp_files():
    """Nettoie les fichiers temporaires"""
    print("\nüßπ NETTOYAGE DES FICHIERS TEMPORAIRES")
    print("=" * 60)
    
    try:
        # Patterns de fichiers temporaires √† supprimer
        temp_patterns = [
            "*.pyc",
            "__pycache__/*",
            "*.tmp",
            "*.log",
            "screenshot_*.jpg",
            "temp_*.jpg"
        ]
        
        deleted_count = 0
        for pattern in temp_patterns:
            files = glob.glob(pattern, recursive=True)
            for file in files:
                try:
                    if os.path.isfile(file):
                        os.remove(file)
                        deleted_count += 1
                    elif os.path.isdir(file):
                        shutil.rmtree(file)
                        deleted_count += 1
                except:
                    pass
        
        # Nettoyer le dossier __pycache__
        for root, dirs, files in os.walk('.'):
            for dir in dirs:
                if dir == '__pycache__':
                    try:
                        shutil.rmtree(os.path.join(root, dir))
                        deleted_count += 1
                    except:
                        pass
        
        print(f"‚úÖ {deleted_count} fichier(s)/dossier(s) temporaire(s) supprim√©(s)")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        return False

def verify_database_structure():
    """V√©rifie et recr√©e la structure de la base de donn√©es si n√©cessaire"""
    print("\nüîç V√âRIFICATION DE LA STRUCTURE DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("attendance.db")
        cursor = conn.cursor()
        
        # V√©rifier la table etudiants
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS etudiants (
                id_etudiant TEXT PRIMARY KEY,
                nom TEXT NOT NULL,
                prenom TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                telephone TEXT,
                mot_de_passe TEXT NOT NULL,
                date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # V√©rifier la table presences
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS presences (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nom TEXT NOT NULL,
                date TEXT NOT NULL,
                heure TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Structure de la base de donn√©es v√©rifi√©e et mise √† jour")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la structure: {e}")
        return False

def create_status_report():
    """Cr√©e un rapport de statut apr√®s la r√©initialisation"""
    print("\nüìä CR√âATION DU RAPPORT DE STATUT")
    print("=" * 60)
    
    try:
        # V√©rifier la base de donn√©es
        conn = sqlite3.connect("attendance.db")
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM etudiants")
        student_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM presences")
        attendance_count = cursor.fetchone()[0]
        
        conn.close()
        
        # V√©rifier le dossier dataset
        dataset_exists = os.path.exists("dataset")
        dataset_empty = len(os.listdir("dataset")) <= 1 if dataset_exists else False  # <= 1 pour .gitkeep
        
        # Cr√©er le rapport
        report = f"""
RAPPORT DE R√âINITIALISATION SYST√àME PRESENCE PRO
===============================================
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä STATUT DE LA BASE DE DONN√âES:
- √âtudiants: {student_count}
- Pr√©sences: {attendance_count}
- Structure: ‚úÖ Valide

üìÅ STATUT DU DATASET:
- Dossier existe: {'‚úÖ' if dataset_exists else '‚ùå'}
- Dossier vide: {'‚úÖ' if dataset_empty else '‚ùå'}

üß† ENCODAGES FACIAUX:
- Fichiers supprim√©s: ‚úÖ
- Pr√™t pour nouveaux encodages: ‚úÖ

üéØ SYST√àME PR√äT POUR:
- ‚úÖ Nouvelle inscription d'√©tudiants
- ‚úÖ Entra√Ænement facial
- ‚úÖ Reconnaissance faciale
- ‚úÖ Suivi des pr√©sences

‚ö†Ô∏è PROCHAINES √âTAPES:
1. D√©marrer le tableau de bord: python admin_dashboard.py
2. Ajouter des √©tudiants via l'interface web
3. Effectuer l'entra√Ænement facial pour chaque √©tudiant
4. Tester la reconnaissance faciale
"""
        
        # Sauvegarder le rapport
        with open("RESET_REPORT.md", "w", encoding="utf-8") as f:
            f.write(report)
        
        print("‚úÖ Rapport de statut cr√©√©: RESET_REPORT.md")
        print(report)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du rapport: {e}")
        return False

def main():
    """Fonction principale de r√©initialisation"""
    print("üîÑ R√âINITIALISATION COMPL√àTE DU SYST√àME PRESENCE PRO")
    print("=" * 80)
    print("Ce script va remettre le syst√®me √† z√©ro et corriger tous les probl√®mes")
    print()
    
    # Demander confirmation
    response = input("‚ö†Ô∏è ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es existantes.\n"
                    "Voulez-vous continuer? (oui/non): ").lower().strip()
    
    if response not in ['oui', 'o', 'yes', 'y']:
        print("‚ùå Op√©ration annul√©e par l'utilisateur")
        return
    
    print("\nüöÄ D√©but de la r√©initialisation...")
    
    # √âtapes de r√©initialisation
    steps = [
        ("Base de donn√©es", reset_database),
        ("Dossier dataset", reset_dataset_folder),
        ("Encodages faciaux", reset_encodings),
        ("Fichiers temporaires", clean_temp_files),
        ("Structure DB", verify_database_structure),
        ("Rapport de statut", create_status_report)
    ]
    
    success_count = 0
    total_steps = len(steps)
    
    for step_name, step_function in steps:
        try:
            if step_function():
                success_count += 1
            else:
                print(f"‚ö†Ô∏è √âchec partiel de l'√©tape: {step_name}")
        except Exception as e:
            print(f"‚ùå Erreur dans l'√©tape {step_name}: {e}")
    
    # R√©sum√© final
    print("\n" + "=" * 80)
    print("üìã R√âSUM√â DE LA R√âINITIALISATION")
    print("=" * 80)
    
    if success_count == total_steps:
        print("üéâ R√âINITIALISATION COMPL√àTE R√âUSSIE!")
        print(f"‚úÖ {success_count}/{total_steps} √©tapes termin√©es avec succ√®s")
        print()
        print("üéØ SYST√àME PR√äT POUR UTILISATION:")
        print("   1. D√©marrez le tableau de bord: python admin_dashboard.py")
        print("   2. Acc√©dez √† http://localhost:5001")
        print("   3. Connectez-vous (admin/admin123)")
        print("   4. Ajoutez vos premiers √©tudiants")
        print("   5. Effectuez l'entra√Ænement facial")
        print()
        print("üìÑ Consultez RESET_REPORT.md pour plus de d√©tails")
    else:
        print(f"‚ö†Ô∏è R√âINITIALISATION PARTIELLE: {success_count}/{total_steps} √©tapes r√©ussies")
        print("   Certaines √©tapes ont √©chou√©, v√©rifiez les messages d'erreur ci-dessus")
    
    print("\nüí° En cas de probl√®me, relancez ce script ou contactez le support")

if __name__ == "__main__":
    main()
